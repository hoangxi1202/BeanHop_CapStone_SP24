// <auto-generated />
using System;
using BeanHop.Database.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BeanHop.Database.Migrations
{
    [DbContext(typeof(BeanHopDBContext))]
    [Migration("20240129120242_InitDB")]
    partial class InitDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BeanHop.Model.Model.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "CUSTOMER",
                            Name = "Customer",
                            NormalizedName = "customer"
                        },
                        new
                        {
                            Id = 2,
                            Description = "STAFF",
                            Name = "Staff",
                            NormalizedName = "staff"
                        },
                        new
                        {
                            Id = 3,
                            Description = "ADMIN",
                            Name = "Admin",
                            NormalizedName = "admin"
                        });
                });

            modelBuilder.Entity("BeanHop.Model.Model.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasFilter("[PhoneNumber] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "1ecdd931-9c4a-48c6-bcb1-482c067fe9eb",
                            Email = "member1@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name1",
                            Lastname = "LastName1",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEFj0uOTk5XlV4Z6Kmck40q0avmn2y+cMwiJa1ApMchyCyYXcmaJzLpJlR73Lv8ushg==",
                            PhoneNumber = "1",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "member1@gmail.com"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "bf8bd8d5-4039-42fe-b868-5b966322b3fe",
                            Email = "member2@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name2",
                            Lastname = "LastName2",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEN1OvoMDK6RU5TlZ/houlZGVQeX8NrH7+l5RPFUQ556FOKG3uVmhJjPHlOHvjLVyHQ==",
                            PhoneNumber = "2",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "member2@gmail.com"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "5a6d58cf-8c28-4d00-9dd2-29875e748f23",
                            Email = "member3@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name3",
                            Lastname = "LastName3",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEBhW9rj+7Z8m6B91CT3kRYQO+IV8uLc9Eir3eNOpgFNyRdu1//CPD15/SwqEgfPQbg==",
                            PhoneNumber = "3",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "member3@gmail.com"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "4b981b16-d725-41b7-a9ae-9a731dee8a95",
                            Email = "member4@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name4",
                            Lastname = "LastName4",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEJwftIiYRtcAAtu8RjuY1cv1KakgR5qu+2BnVS2PXEkKkHOU8wKLKrBYw4yH1lLqQA==",
                            PhoneNumber = "4",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "member4@gmail.com"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "6f4851ec-44e8-4808-a62c-5219fb814453",
                            Email = "member5@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name5",
                            Lastname = "LastName5",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEFsdYBF4Z62uBWFQ/YuuJstlowbjKKQThjxmZoEUbIguc0hDDaYnq9auVe6UDCTksg==",
                            PhoneNumber = "5",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "member5@gmail.com"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "42c2380c-0557-4b8e-88d0-2fe238b66e84",
                            Email = "member6@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name6",
                            Lastname = "LastName6",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEFSKVvLHgv3tUp66vpGBEl/4C5eEAy6W161PLdwNsfSnAFVcrrS1TZrMP/8uwWCxPw==",
                            PhoneNumber = "6",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "member6@gmail.com"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "62bcea09-fc49-4415-a419-9b43c64fff4c",
                            Email = "member7@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name7",
                            Lastname = "LastName7",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEKfpYN9uNsXjmYZ7gbuL09pYagjwlssXdJcNBUloHDexg8RlkvGHhODMMvYpUG218A==",
                            PhoneNumber = "7",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "member7@gmail.com"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "9ed32da0-8f01-434a-a2d2-1ebc04b69f45",
                            Email = "member8@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name8",
                            Lastname = "LastName8",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEAZKFRh0n3mBqJzmFNbmPAP3Oad9R7dlRwRzMKqjqrp3vX0SytPAASyMwsFa92j+gg==",
                            PhoneNumber = "8",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "member8@gmail.com"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "425dfa2c-32b6-41e3-a7f1-de138c420d87",
                            Email = "member9@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name9",
                            Lastname = "LastName9",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEO7ikwikoPZe81FjgDxb45/PQlHJxfIV916/GUDvtNOYHAwzQcMj+MZGZrwlvz4Vrg==",
                            PhoneNumber = "9",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "member9@gmail.com"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "2cc49cf6-6e83-4c55-892c-2e9e5389e8d2",
                            Email = "member10@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name10",
                            Lastname = "LastName10",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEBTM9WIOFHDrb7FiKDdZQlPI8ZHYGq/PN0ACeYLwEPQT/bab3h59q9lR2pfL024olQ==",
                            PhoneNumber = "10",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "member10@gmail.com"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "0f565c9c-8294-4d7d-8d4a-c479ee72c91a",
                            Email = "staff11@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name11",
                            Lastname = "LastName11",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEHmg+qx/prwZZdPxbK3cxrEZTgZI9sEeEeZSEq4559x8K7rHgXV1+SIobsem499X+w==",
                            PhoneNumber = "11",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "staff11@gmail.com"
                        },
                        new
                        {
                            Id = 12,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "333e6d0f-3108-462f-9375-199675d23817",
                            Email = "staff12@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name12",
                            Lastname = "LastName12",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAENycUCIwfu0Fw+J9XgxwLlyo2YkxS7/+qtHSUI1qJp7yUfCujG/jqfqnJfQVdf1zfA==",
                            PhoneNumber = "12",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "staff12@gmail.com"
                        },
                        new
                        {
                            Id = 13,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "dda0276e-3c1b-4ecf-b7d8-2d27d22f96f4",
                            Email = "staff13@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name13",
                            Lastname = "LastName13",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEKsU9aKi02Xu+4EDJKcjIRCKHGwC1AkMa9QyUMsLwCWN+aZRWSQQEpLBaJnnDQLXQg==",
                            PhoneNumber = "13",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "staff13@gmail.com"
                        },
                        new
                        {
                            Id = 14,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "13603003-7f50-4082-809f-bfd62b3cc6d9",
                            Email = "staff14@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name14",
                            Lastname = "LastName14",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEHkon0mwGuICgb3LP64ASmvkqv3fWXfBfCkyXMzSXWVjntPhsG6w5W0GxlkipWx4fA==",
                            PhoneNumber = "14",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "staff14@gmail.com"
                        },
                        new
                        {
                            Id = 15,
                            AccessFailedCount = 0,
                            Address = "HCM",
                            ConcurrencyStamp = "22d5154c-2d13-459b-9683-6d38be6fd841",
                            Email = "staff15@gmail.com",
                            EmailConfirmed = true,
                            Firstname = "Name15",
                            Lastname = "LastName15",
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEB83TuN/EyYhkxHnoXfNOJ9FVbBIFkMkpoWv9Ou3XXZp0bqFQHOkhZvkgnavIHjmcw==",
                            PhoneNumber = "15",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "staff15@gmail.com"
                        });
                });

            modelBuilder.Entity("BeanHop.Model.Model.Bean", b =>
                {
                    b.Property<int>("BeanID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BeanID"));

                    b.Property<string>("BeanName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("ntext");

                    b.Property<string>("Breed")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("ntext");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ImportID")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<DateTime?>("UpdatetDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.HasKey("BeanID");

                    b.HasIndex("ImportID");

                    b.ToTable("Bean");
                });

            modelBuilder.Entity("BeanHop.Model.Model.BeanProduct", b =>
                {
                    b.Property<int>("BeanID")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.HasKey("BeanID", "ProductID");

                    b.HasIndex("ProductID");

                    b.ToTable("BeanProduct");
                });

            modelBuilder.Entity("BeanHop.Model.Model.Comment", b =>
                {
                    b.Property<int>("CommentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentID"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PostID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatetDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.HasKey("CommentID");

                    b.HasIndex("PostID");

                    b.HasIndex("UserID");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("BeanHop.Model.Model.Favorite", b =>
                {
                    b.Property<int>("FavoriteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FavoriteID"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatetDate")
                        .HasColumnType("datetime2");

                    b.HasKey("FavoriteID");

                    b.HasIndex("CustomerID")
                        .IsUnique();

                    b.ToTable("Favorite");
                });

            modelBuilder.Entity("BeanHop.Model.Model.FavoriteProduct", b =>
                {
                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("FavouriteID")
                        .HasColumnType("int");

                    b.Property<int>("FavoriteID")
                        .HasColumnType("int");

                    b.HasKey("ProductID", "FavouriteID");

                    b.HasIndex("FavoriteID");

                    b.ToTable("FavoriteProduct");
                });

            modelBuilder.Entity("BeanHop.Model.Model.Image", b =>
                {
                    b.Property<int>("ImageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageID"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("ImageData")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<int?>("PostID")
                        .HasColumnType("int");

                    b.Property<int?>("ProductID")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ImageID");

                    b.HasIndex("PostID");

                    b.HasIndex("ProductID");

                    b.HasIndex("UserID");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("BeanHop.Model.Model.Import", b =>
                {
                    b.Property<int>("ImportID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImportID"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("StaffID")
                        .HasColumnType("int");

                    b.Property<double>("TotalWeight")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdatetDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.HasKey("ImportID");

                    b.HasIndex("StaffID");

                    b.ToTable("Import");
                });

            modelBuilder.Entity("BeanHop.Model.Model.Notification", b =>
                {
                    b.Property<int>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationID"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<DateTime?>("UpdatetDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.HasKey("NotificationID");

                    b.HasIndex("UserID");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("BeanHop.Model.Model.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ShipDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<double>("TotalOrderPrice")
                        .HasColumnType("float");

                    b.Property<double>("TotalProductPrice")
                        .HasColumnType("float");

                    b.HasKey("OrderID");

                    b.HasIndex("CustomerID");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("BeanHop.Model.Model.OrderDetail", b =>
                {
                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float");

                    b.HasKey("OrderID", "ProductID");

                    b.HasIndex("ProductID");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("BeanHop.Model.Model.Payment", b =>
                {
                    b.Property<int>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentID"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("PaymentID");

                    b.HasIndex("OrderID")
                        .IsUnique();

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("BeanHop.Model.Model.Post", b =>
                {
                    b.Property<int>("PostID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostID"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StaffID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<DateTime?>("UpdatetDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.HasKey("PostID");

                    b.HasIndex("StaffID");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("BeanHop.Model.Model.Price", b =>
                {
                    b.Property<int>("PriceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PriceID"));

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<string>("PackagingType")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.HasKey("PriceID");

                    b.HasIndex("ProductID");

                    b.ToTable("Price");

                    b.HasData(
                        new
                        {
                            PriceID = 1,
                            Cost = 51000.0,
                            PackagingType = "Nguyên Hạt",
                            ProductID = 1,
                            Weight = 200.0,
                            status = true
                        },
                        new
                        {
                            PriceID = 2,
                            Cost = 102000.0,
                            PackagingType = "Thô vừa",
                            ProductID = 1,
                            Weight = 500.0,
                            status = true
                        },
                        new
                        {
                            PriceID = 3,
                            Cost = 51000.0,
                            PackagingType = "Nguyên Hạt",
                            ProductID = 2,
                            Weight = 200.0,
                            status = true
                        },
                        new
                        {
                            PriceID = 4,
                            Cost = 102000.0,
                            PackagingType = "Thô vừa",
                            ProductID = 2,
                            Weight = 500.0,
                            status = true
                        });
                });

            modelBuilder.Entity("BeanHop.Model.Model.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductID"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<DateTime>("ExpextDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Introduction")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<int?>("RoastLevelID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatetDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.HasKey("ProductID");

                    b.HasIndex("RoastLevelID");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            ProductID = 1,
                            CreateDate = new DateTime(2024, 1, 29, 19, 2, 42, 204, DateTimeKind.Local).AddTicks(3857),
                            Description = "Nằm ở độ cao 1500-1600m so với mực nước biển, Núi Min (xã Trạm Hành, Lâm Đồng) là vùng đất được thiên nhiên ưu ái khí hậu và thổ nhưỡng phù hợp phát triển cà phê Arabica. Hạt cà phê Núi Min đạt được những nốt hương tinh tế từ trái cây, socola, hạt khô, và quan trọng trên hết là sự cân bằng của vị chua-ngọt cùng cảm nhận êm ái tới tận hậu vị. \r\nVốn ý thức được từ sớm về giá trị của việc phát triển cà phê chất lượng cao, các nông hộ tại Núi Min vẫn luôn quan tâm tới chất lượng trồng trọt và thu hái, đảm bảo thu hoạch trái chín, hái bằng tay, sơ chế đúng tiêu chuẩn...\r\nCà phê Núi Min, Trạm Hành được xưởng rang BeanHop gửi tới khách hàng là hạt được sơ chế ướt bởi Lâm Tuyền Farm, sàng cỡ 18 đồng đều, hạt đẹp không lỗi. BeanHop cung cấp hai mức rang khác nhau là Light Roast và Medium Roast, đáp ứng nhu cầu đa dạng của khách hàng uống pha máy espresso/mokapot/phin cũng như khách hàng yêu thích cà phê rang light pha thủ công/ủ coldbrew\"\r\nDưới đây là một số công thức pha:\r\n- Công thức pha  Pour over (giấy lọc) - Hạt Light Roast\r\nCà phê sử dụng: 15GR\r\nTỉ lệ pha: 1:13 - 1:15\r\nNhiệt độ nước: 93*C\r\nThời gian pha: 2 phút 30 giây\r\n- Công thức pha máy Espresso - Hạt Medium Roast\r\nCà phê sử dụng: 18GR (doubleshot)\r\nThu được 36GR Espresso\r\nTỉ lệ gram in-out: 1:2\r\nNhiệt độ nước: 93-94*C\r\nThời gian pha: 27-3 giây\r\n- Công thức pha Ủ Coldbrew: \r\nTỉ lệ cà phê-nước 1:12 . Thời gian ủ 12 tiếng cho rang Medium, 15-18 tiếng cho rang Light \r\nSau khi lọc xong bã thì giữ lạnh coldbrew trong tủ lạnh thêm 2 tiếng trước khi thưởng thức",
                            ExpextDate = new DateTime(2024, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Introduction = "Thông tin cơ bản:\r\n- Farm : Lâm Tuyền, Núi Min, Trạm Hành\r\n- Giống: Catimor\r\n- Sơ chế: Full Washed\r\n- Độ cao: 1500 - 1600m\r\n- Hương vị: Plum Acidity, Caramel, Smooth body and sweetness",
                            ProductName = "Cà phê Arabica Núi Min Rang Medium Pha Máy Pha Phin Ủ Coldbrew",
                            RoastLevelID = 1,
                            status = true
                        },
                        new
                        {
                            ProductID = 2,
                            CreateDate = new DateTime(2024, 1, 29, 19, 2, 42, 204, DateTimeKind.Local).AddTicks(3893),
                            Description = "An Coffee Farm là Farm Robusta chất lượng cao nằm ở độ cao 1000m, thuộc xã Hoài Đức, Lâm Hà, Lâm Đồng. Nông hộ cà phê được trực tiếp quản lý chất lượng bởi chị Duyên Anh, một người dành rất nhiều tâm huyết với hạt Robusta Việt Nam, luôn cố gắng cải thiện công nghệ cũng như chất lượng gieo trồng để mỗi vụ mùa đều cho ra sản phẩm hạt Robusta tốt hơn. \r\nLà một khách hàng của An Coffee Farm, xưởng rang BeanHop hoàn toàn yên tâm về chất lượng hạt, mỗi mùa vụ đều đạt độ tinh tế về hương vị  ổn định hoặc tốt hơn mùa trước. Cà phê Robusta Lâm Hà sơ chế Honey (hình thức sơ chế phơi khô khi phần vỏ ngoài và thịt của trái cà phê được loại bỏ 1 phần) được xưởng BeanHop cung cấp với mức rang Medium Roast hoặc Medium-Dark Roast. Hạt thể hiện rất tốt hương vị chua nhẹ trái cây, ngọt béo dày dặn, hậu vị êm ái khi sử dụng cho pha phin, pha máy espresso, ấm mokapot, ủ coldbrew...\r\n\r\nCông thức pha máy Espresso - Hạt Medium Roast \r\nCà phê sử dụng: 18GR (doubleshot) \r\nThu được 40GR Espresso \r\nTỉ lệ gram in-out: 1:2,2\r\nNhiệt độ nước: 92-93*C \r\nThời gian pha: 25-27 giây\r\n",
                            ExpextDate = new DateTime(2024, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Introduction = "Thông tin vùng trồng hạt cà phê:\r\n- Farm : An Coffee Farm - Farm Robusta chất lượng cao\r\n- Giống: Búp Tím\r\n- Sơ chế: Honey\r\n- Độ cao: 1000 -1100m\r\n- Hương vị: Chua nhẹ, Béo và êm, độ đậm vừa phải",
                            ProductName = "Cà phê Robusta Lâm Hà Honey GU NHẸ Rang Medium Pha Phin Pha Máy",
                            RoastLevelID = 1,
                            status = true
                        },
                        new
                        {
                            ProductID = 3,
                            CreateDate = new DateTime(2024, 1, 29, 19, 2, 42, 204, DateTimeKind.Local).AddTicks(3906),
                            Description = "Cà phê là sự phối trộn giữa 2 dòng cà phê chất lượng cao:\r\n.  80% Robusta Lâm Hà (Natural)\r\n. 20% Arabica Cầu Đất (Washed)\r\nĐem tới Hương vị: Hương Dark Chocolate Mạnh, Có hậu vị dài\r\nĐậm đà, Ngọt béo, Dày vị\r\n\r\nThông tin về dòng cà phê Arabica và Robusta: \r\n- ROBUSTA LÂM HÀ\r\nVùng: Xã Hoài Đức, Lâm Hà, Lâm Đồng\r\nĐộ cao: 1000M\r\nGiống: BÚP TÍM\r\nSơ chế: Natural\r\nHương vị: Thơm hương Dark Chocolate, Đậm đà, Ngọt sâu, Hậu vị dài. Có chút đắng nhẹ hậu vị\r\n- VIỆT NAM ARABICA CẦU ĐẤT\r\nVùng: Cầu Đất, Đà Lạt, Lâm Đồng\r\nĐộ cao: 1500M\r\nGiống: Catimor\r\nSơ chế: WASHED\r\nHương vị: Đậm Đà, Chocote, Vị béo cao của hạt khô (Nutty), Chua nhẹ",
                            ExpextDate = new DateTime(2024, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Introduction = "COFFEE BLENDED: 8 ROBUSTA - 2 ARABICA\r\nDÀNH CHO GU UỐNG ĐẬM\r\nPHÙ HỢP PHA PHIN, PHA MÁY (GU ĐẬM)",
                            ProductName = "Cà phê Blend GU ĐẬM 8 Robusta 2 Arabica Pha Phin",
                            RoastLevelID = 2,
                            status = true
                        },
                        new
                        {
                            ProductID = 4,
                            CreateDate = new DateTime(2024, 1, 29, 19, 2, 42, 204, DateTimeKind.Local).AddTicks(3917),
                            Description = "Cà phê là sự phối trộn giữa 2 dòng cà phê chất lượng cao:\r\n. 70% Arabica Cầu Đất (Washed)\r\n. 30% Robusta Lâm Hà (Honey)\r\nĐem tới hương vị: Chua thanh, Ngọt hậu\r\nHương Chocolate, Caramel Ngọt béo, Độ đậm vừa phải\r\n\r\nThông tin về dòng cà phê Arabica và Robusta: \r\n- VIỆT NAM ARABICA NÚI MIN\r\nVùng: Lâm Tuyền, Núi Min, Xã Trạm Hành\r\nĐộ cao: 1600M+\r\nGiống: Catimor\r\nSơ chế: WASHED\r\nHương vị: Chua thanh trái cây (Hương giống trái cam, mận), Ngọt hậu, hương socola và caramel nhẹ nhàng\r\n- ROBUSTA LÂM HÀ\r\nVùng: Xã Hoài Đức, Lâm Hà, Lâm Đồng\r\nĐộ cao: 1000M\r\nGiống: Búp Tím\r\nSơ chế: Honey\r\nHương vị: Chua nhẹ, Ngọt dịu, Độ béo cao, Hậu vị êm",
                            ExpextDate = new DateTime(2024, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Introduction = "COFFEE BLENDED: 7 ARABICA - 3 ROBUSTA\r\nDÀNH CHO GU UỐNG NHẸ\r\nPHÙ HỢP PHA PHIN, PHA ESPRESSO (MÁY, DỤNG CỤ PHA CẦM TAY, ẤM MOKA...)\r\nỦ COLDBREW",
                            ProductName = "Cà phê Blend GU NHẸ 7 Arabica 3 Robusta Pha Phin Pha Máy",
                            RoastLevelID = 3,
                            status = true
                        },
                        new
                        {
                            ProductID = 5,
                            CreateDate = new DateTime(2024, 1, 29, 19, 2, 42, 204, DateTimeKind.Local).AddTicks(3950),
                            Description = "An Coffee Farm là Farm Robusta chất lượng cao nằm ở độ cao 1000m, thuộc xã Hoài Đức, Lâm Hà, Lâm Đồng. Nông hộ cà phê được trực tiếp quản lý chất lượng bởi chị Duyên Anh, một người dành rất nhiều tâm huyết với hạt Robusta Việt Nam, luôn cố gắng cải thiện công nghệ cũng như chất lượng gieo trồng để mỗi vụ mùa đều cho ra sản phẩm hạt Robusta tốt hơn. \r\nLà một khách hàng của An Coffee Farm, xưởng rang BeanHop hoàn toàn yên tâm về chất lượng hạt, mỗi mùa vụ đều đạt độ tinh tế về hương vị tốt hơn mùa trước. Cà phê Robusta Lâm Hà sơ chế Natural được xưởng BeanHop cung cấp với mức rang Medium-Dark Roast. Hạt thể hiện rất tốt hương vị cà phê đậm đà phong cách truyền thống, ngọt béo dày dặn, hậu vị hơi đắng nhẹ khi sử dụng cho pha phin, pha máy espresso, ấm mokapot\r\n\r\nCT máy Espresso - Hạt Medium Roast \r\nCà phê sử dụng: 18GR (doubleshot) \r\nThu được 40GR Espresso \r\nTỉ lệ gram in-out: 1:2,2\r\nNhiệt độ nước: 92-93*C \r\nThời gian pha: 25-27 giây",
                            ExpextDate = new DateTime(2024, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Introduction = "Thông tin vùng trồng hạt cà phê:\r\n- Farm : An Coffee Farm - Farm Robusta chất lượng cao\r\n- Giống: Búp tím\r\n- Sơ chế: Natural\r\n- Độ cao: 1000 -1100m\r\n- Hương vị: Đậm đà, Ngọt Béo, Đắng nhẹ",
                            ProductName = "Cà phê Robusta Lâm Hà Natural GU ĐẬM Rang Medium Pha Máy Pha Phin",
                            RoastLevelID = 3,
                            status = true
                        });
                });

            modelBuilder.Entity("BeanHop.Model.Model.Rate", b =>
                {
                    b.Property<int>("RateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RateID"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatetDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.HasKey("RateID");

                    b.HasIndex("ProductID");

                    b.HasIndex("UserID");

                    b.ToTable("Rate");
                });

            modelBuilder.Entity("BeanHop.Model.Model.RoastLevel", b =>
                {
                    b.Property<int>("RoastLevelID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoastLevelID"));

                    b.Property<string>("RoastName")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.HasKey("RoastLevelID");

                    b.ToTable("RoastLevel");

                    b.HasData(
                        new
                        {
                            RoastLevelID = 1,
                            RoastName = "Light"
                        },
                        new
                        {
                            RoastLevelID = 2,
                            RoastName = "Medium"
                        },
                        new
                        {
                            RoastLevelID = 3,
                            RoastName = "Medium Dark"
                        },
                        new
                        {
                            RoastLevelID = 4,
                            RoastName = "Dark"
                        });
                });

            modelBuilder.Entity("BeanHop.Model.Model.Transport", b =>
                {
                    b.Property<int>("TransportID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransportID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentID")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdatetDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.HasKey("TransportID");

                    b.HasIndex("PaymentID")
                        .IsUnique();

                    b.ToTable("Transport");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 6,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 7,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 8,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 9,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 10,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 11,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 12,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 13,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 14,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 15,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BeanHop.Model.Model.Bean", b =>
                {
                    b.HasOne("BeanHop.Model.Model.Import", "Import")
                        .WithMany("Beans")
                        .HasForeignKey("ImportID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Import");
                });

            modelBuilder.Entity("BeanHop.Model.Model.BeanProduct", b =>
                {
                    b.HasOne("BeanHop.Model.Model.Bean", "Bean")
                        .WithMany("BeanProducts")
                        .HasForeignKey("BeanID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeanHop.Model.Model.Product", "Product")
                        .WithMany("BeanProducts")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bean");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BeanHop.Model.Model.Comment", b =>
                {
                    b.HasOne("BeanHop.Model.Model.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeanHop.Model.Model.AppUser", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BeanHop.Model.Model.Favorite", b =>
                {
                    b.HasOne("BeanHop.Model.Model.AppUser", "Customer")
                        .WithOne("Favourite")
                        .HasForeignKey("BeanHop.Model.Model.Favorite", "CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BeanHop.Model.Model.FavoriteProduct", b =>
                {
                    b.HasOne("BeanHop.Model.Model.Favorite", "Favorite")
                        .WithMany("FavoriteProducts")
                        .HasForeignKey("FavoriteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeanHop.Model.Model.Product", "Product")
                        .WithMany("FavoriteProducts")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Favorite");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BeanHop.Model.Model.Image", b =>
                {
                    b.HasOne("BeanHop.Model.Model.Post", "Post")
                        .WithMany("Images")
                        .HasForeignKey("PostID");

                    b.HasOne("BeanHop.Model.Model.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductID");

                    b.HasOne("BeanHop.Model.Model.AppUser", "User")
                        .WithMany("Images")
                        .HasForeignKey("UserID");

                    b.Navigation("Post");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BeanHop.Model.Model.Import", b =>
                {
                    b.HasOne("BeanHop.Model.Model.AppUser", "Staff")
                        .WithMany("Imports")
                        .HasForeignKey("StaffID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("BeanHop.Model.Model.Notification", b =>
                {
                    b.HasOne("BeanHop.Model.Model.AppUser", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BeanHop.Model.Model.Order", b =>
                {
                    b.HasOne("BeanHop.Model.Model.AppUser", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("BeanHop.Model.Model.OrderDetail", b =>
                {
                    b.HasOne("BeanHop.Model.Model.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeanHop.Model.Model.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BeanHop.Model.Model.Payment", b =>
                {
                    b.HasOne("BeanHop.Model.Model.Order", "Order")
                        .WithOne("Payment")
                        .HasForeignKey("BeanHop.Model.Model.Payment", "OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("BeanHop.Model.Model.Post", b =>
                {
                    b.HasOne("BeanHop.Model.Model.AppUser", "Staff")
                        .WithMany("Posts")
                        .HasForeignKey("StaffID");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("BeanHop.Model.Model.Price", b =>
                {
                    b.HasOne("BeanHop.Model.Model.Product", "Product")
                        .WithMany("ListPrice")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("BeanHop.Model.Model.Product", b =>
                {
                    b.HasOne("BeanHop.Model.Model.RoastLevel", "RoastLevel")
                        .WithMany("Products")
                        .HasForeignKey("RoastLevelID");

                    b.Navigation("RoastLevel");
                });

            modelBuilder.Entity("BeanHop.Model.Model.Rate", b =>
                {
                    b.HasOne("BeanHop.Model.Model.Product", "Product")
                        .WithMany("Rates")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeanHop.Model.Model.AppUser", "User")
                        .WithMany("Rates")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BeanHop.Model.Model.Transport", b =>
                {
                    b.HasOne("BeanHop.Model.Model.Payment", "Payment")
                        .WithOne("Transport")
                        .HasForeignKey("BeanHop.Model.Model.Transport", "PaymentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("BeanHop.Model.Model.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("BeanHop.Model.Model.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("BeanHop.Model.Model.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("BeanHop.Model.Model.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeanHop.Model.Model.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("BeanHop.Model.Model.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeanHop.Model.Model.AppUser", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Favourite");

                    b.Navigation("Images");

                    b.Navigation("Imports");

                    b.Navigation("Notifications");

                    b.Navigation("Orders");

                    b.Navigation("Posts");

                    b.Navigation("Rates");
                });

            modelBuilder.Entity("BeanHop.Model.Model.Bean", b =>
                {
                    b.Navigation("BeanProducts");
                });

            modelBuilder.Entity("BeanHop.Model.Model.Favorite", b =>
                {
                    b.Navigation("FavoriteProducts");
                });

            modelBuilder.Entity("BeanHop.Model.Model.Import", b =>
                {
                    b.Navigation("Beans");
                });

            modelBuilder.Entity("BeanHop.Model.Model.Order", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("Payment")
                        .IsRequired();
                });

            modelBuilder.Entity("BeanHop.Model.Model.Payment", b =>
                {
                    b.Navigation("Transport")
                        .IsRequired();
                });

            modelBuilder.Entity("BeanHop.Model.Model.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("BeanHop.Model.Model.Product", b =>
                {
                    b.Navigation("BeanProducts");

                    b.Navigation("FavoriteProducts");

                    b.Navigation("Images");

                    b.Navigation("ListPrice");

                    b.Navigation("OrderDetails");

                    b.Navigation("Rates");
                });

            modelBuilder.Entity("BeanHop.Model.Model.RoastLevel", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
